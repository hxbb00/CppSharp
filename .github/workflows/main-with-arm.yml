name: CI-with-arm

on:
    workflow_dispatch:

jobs:
  build-arm:
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu16.04

    runs-on: ubuntu-20.04

    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "/home/runner/work:/home/runner/work"
          
          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            CC: gcc
            CXX: g++
            PLATFORM: ${{ matrix.arch }}
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true

          install: |
            apt-get update -q -y
            apt-get install -q -y --no-install-recommends cmake make build-essential gdb git apt-utils curl unzip ca-certificates
            apt-get install -q -y --no-install-recommends ninja-build python3-dev wget sudo software-properties-common python-software-properties
            echo "Setup dotnet 3.1.x"
            wget https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.sh -O dotnet-install.sh
            sudo chmod +x ./dotnet-install.sh
            ./dotnet-install.sh --version 3.1.426 --install-dir /usr/share/dotnet
            ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet
            dotnet tool install --global nbgv --version 3.5.119

          run: |
            uname -a
            cat /proc/version
            pwd
            ls -al "${PWD}"
            dotnet --version
            nbgv cloud --all-vars
            echo "Setup"
            ./build/build.sh clean -platform aarch64
            ./build/build.sh generate -platform aarch64
            ./build/build.sh download_llvm -platform aarch64
            echo "restore"
            ./build/build.sh restore -platform aarch64
            echo "Build"
            ./build/build.sh -build_only -platform aarch64
            echo "Pack"
            ./build/build.sh prepack -platform aarch64
            ls -al "${PWD}"

      - name: Show the artifacts
        run: |
          pwd
          ls -al "${PWD}/artifacts"
          
      - uses: actions/upload-artifact@v3
        with:
          name: intermediate
          path: |
            artifacts
            include/**/*.h

  build-x64-on-docker:
    runs-on: ubuntu-20.04
    container:
      image: 'ghcr.io/hxbb00/ubuntu1604:main'
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}

    env:
      CC: gcc
      CXX: g++
      PLATFORM: x64
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)

      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      # You can test your matrix by printing the current dotnet version
      - name: Setup dotnet
        shell: bash
        run: |
          uname -a
          cat /proc/version
          pwd
          ls -al "${PWD}"
          dotnet --version
          nbgv cloud --all-vars
          build/build.sh generate -platform $PLATFORM
          build/build.sh download_llvm -platform $PLATFORM
          build/build.sh restore -platform $PLATFORM
          echo "Build"
          build/build.sh -platform $PLATFORM -build_only
          echo "Pack"
          build/build.sh prepack -platform $PLATFORM

      - uses: actions/upload-artifact@v3
        with:
          name: intermediate
          path: |
            artifacts
            include/**/*.h

  build-x64-win:
    strategy:
      fail-fast: false
      matrix:
        dotnet-version: [ '3.1.x' ]
        config:
          - { os: windows-2019, platform: x64, vs: msvc }

    runs-on: ${{ matrix.config.os }}

    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      PLATFORM: ${{ matrix.config.platform }}
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # You can test your matrix by printing the current dotnet version
      - name: Display dotnet version
        run: dotnet --version

      - name: Uninstall nbgv
        run: |
          dotnet tool uninstall --global nbgv

      - name: Install nbgv
        run: |
          dotnet tool install --global nbgv --version 3.5.119

      - name: Set version
        run: nbgv cloud --all-vars

      - name: Environment
        if: matrix.config.vs
        shell: bash
        run: echo "/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin" >> $GITHUB_PATH

      - name: Setup
        shell: bash
        run: |
          build/build.sh generate -platform $PLATFORM
          build/build.sh download_llvm -platform $PLATFORM

      - name: Restore
        shell: bash
        run: build/build.sh restore -platform $PLATFORM

      - name: Build
        shell: bash
        run: build/build.sh -platform $PLATFORM -build_only

      # - name: Test
      #   shell: bash
      #   run: build/test.sh -platform $PLATFORM

      - name: Pack
        shell: bash
        run: build/build.sh prepack -platform $PLATFORM

      - uses: actions/upload-artifact@v3
        with:
          name: intermediate
          path: |
            artifacts
            include/**/*.h

  create_package:
    runs-on: windows-2019
    needs: [build-x64-win, build-arm, build-x64-on-docker]

    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      # You can test your matrix by printing the current dotnet version
      - name: Display dotnet version
        run: dotnet --version

      - name: Uninstall nbgv
        run: |
          dotnet tool uninstall --global nbgv

      - name: Install nbgv
        run: |
          dotnet tool install --global nbgv --version 3.5.119

      - name: Set version
        run: nbgv cloud --all-vars

      - uses: actions/download-artifact@v3
        with:
          name: intermediate

      - name: Setup
        shell: bash
        run: build/build.sh generate_config

      - name: Create package
        shell: bash
        run: build/build.sh pack

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: CppSharp.nupkg
          path: |
            artifacts/*.nupkg

      - name: Upload package to GitHub Packages
        run: |
          cd artifacts
          dotnet nuget push "*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "https://nuget.pkg.github.com/hxbb00/index.json" --skip-duplicate

      - name: Publish package to nuget.org
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd artifacts
          dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json" --skip-duplicate

